name: CI / CD

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  rust-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        run: |
          rustup toolchain install stable --profile minimal
          rustup component add rustfmt clippy
          sudo apt-get update && sudo apt-get install -y lld

      - name: Format Rust code
        run: cargo fmt --all -- --check
        working-directory: ./rust/fabric

      - name: Lint Rust code
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: ./rust/fabric

      - name: Build Rust library
        run: cargo build --verbose
        working-directory: ./rust/fabric

      - name: Run Rust tests
        run: cargo test --verbose
        working-directory: ./rust/fabric

      - name: Build and test examples
        run: |
          for example in rust/examples/*; do
            if [ -d "$example" ]; then
              echo "Building and testing $example"
              cd "$example"
              cargo build --verbose
              cargo test --verbose
              cd -
            fi
          done

  python-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install poetry
          poetry install
        working-directory: ./python

      - name: Lint Python code
        run: ruff check .
        working-directory: ./python

      - name: Run Python tests
        run: pytest
        working-directory: ./python

  build-and-push-images:
    needs: [rust-ci, python-ci]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Rust node dependencies
        uses: docker/build-push-action@v6
        with:
          context: .
          file: rust/docker/node_dependencies.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rust_node_dependencies:latest

      - name: Build and push Rust orchestrator dependencies
        uses: docker/build-push-action@v6
        with:
          context: .
          file: rust/docker/orchestrator_dependencies.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rust_orchestrator_dependencies:latest

      - name: Build and push Rust node
        uses: docker/build-push-action@v6
        with:
          context: .
          file: rust/docker/node.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rust_node:latest

      - name: Build and push Rust orchestrator
        uses: docker/build-push-action@v6
        with:
          context: .
          file: rust/docker/orchestrator.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rust_orchestrator:latest

      - name: Build and push Python node dependencies
        uses: docker/build-push-action@v6
        with:
          context: .
          file: python/docker/node_dependencies.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/python_node_dependencies:latest

      - name: Build and push Python node
        uses: docker/build-push-action@v6
        with:
          context: .
          file: python/docker/node.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/python_node:latest
